import os
import json
from flask import Flask, request, render_template, send_from_directory, jsonify
from werkzeug.utils import secure_filename
from process_pdf import process_pdf_files
import uuid

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
# 取消PDF上传大小限制
# app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB max upload size

# Ensure the upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process_files():
    """API endpoint for processing PDF files with AJAX"""
    try:
        # Check if the post request has the file part
        if 'pdf_file' not in request.files or 'json_file' not in request.files:
            return jsonify({"success": False, "message": "请选择PDF文件和JSON文件"})

        pdf_file = request.files['pdf_file']
        json_file = request.files['json_file']

        # If user does not select file, browser also submits an empty part without filename
        if pdf_file.filename == '' or json_file.filename == '':
            return jsonify({"success": False, "message": "请选择PDF文件和JSON文件"})

        if pdf_file and json_file:
            upload_id = str(uuid.uuid4())
            upload_dir = os.path.join(app.config['UPLOAD_FOLDER'], upload_id)
            os.makedirs(upload_dir, exist_ok=True)

            pdf_filename = secure_filename(pdf_file.filename)
            json_filename = secure_filename(json_file.filename)

            pdf_path = os.path.join(upload_dir, pdf_filename)
            json_path = os.path.join(upload_dir, json_filename)

            pdf_file.save(pdf_path)
            json_file.save(json_path)

            # Get convert_text_to_curves parameter
            convert_text_to_curves = request.form.get('convert_text', 'false').lower() == 'true'

            # Process the PDF files
            processing_result = process_pdf_files(pdf_path, json_path, upload_dir, convert_text_to_curves=convert_text_to_curves)

            if processing_result["success"]:
                # Determine which file to return
                final_filename = None
                if processing_result["output_final_pdf"]:
                    final_filename = os.path.basename(processing_result["output_final_pdf"])
                elif processing_result["output_cmyk_pdf"]:
                    final_filename = os.path.basename(processing_result["output_cmyk_pdf"])
                
                return jsonify({
                    "success": True,
                    "message": processing_result["message"],
                    "filename": final_filename,
                    "upload_id": upload_id
                })
            else:
                return jsonify({
                    "success": False,
                    "message": processing_result["message"]
                })
    
    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"服务器错误: {str(e)}"
        })

@app.route('/download/<upload_id>/<filename>')
def download_file(upload_id, filename):
    """Download endpoint for processed files"""
    return send_from_directory(os.path.join(app.config['UPLOAD_FOLDER'], upload_id), filename, as_attachment=True)

@app.route('/api/color-mapping', methods=['GET'])
def get_color_mapping():
    """获取默认颜色映射"""
    try:
        with open('default_color_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        return jsonify(data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/color-mapping', methods=['POST'])
def save_color_mapping():
    """保存颜色映射到默认文件"""
    try:
        data = request.get_json()
        with open('default_color_mapping.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return jsonify({"success": True, "message": "颜色映射已保存"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/upload-pdf', methods=['POST'])
def upload_pdf():
    """上传PDF文件"""
    try:
        if 'pdf_file' not in request.files:
            return jsonify({"success": False, "message": "请选择PDF文件"})

        pdf_file = request.files['pdf_file']
        if pdf_file.filename == '':
            return jsonify({"success": False, "message": "请选择PDF文件"})

        upload_id = str(uuid.uuid4())
        upload_dir = os.path.join(app.config['UPLOAD_FOLDER'], upload_id)
        os.makedirs(upload_dir, exist_ok=True)

        pdf_filename = secure_filename(pdf_file.filename)
        pdf_path = os.path.join(upload_dir, pdf_filename)
        pdf_file.save(pdf_path)

        return jsonify({
            "success": True,
            "upload_id": upload_id,
            "filename": pdf_filename,
            "file_path": pdf_path
        })

    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"上传失败: {str(e)}"
        })

if __name__ == '__main__':
    # Get the port from environment variable or use a default
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
